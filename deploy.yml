- hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: python
  tasks:
    - name: launch instance #1
      os_server:
        name: api-ins-1
        state: present
        image: Ubuntu-14.04
        flavor_ram: 512
        auto_floating_ip: yes
        key_name: "keyname"
      register: api_server_1
    - name: get facts about the server (including its public v4 IP address)
      os_server_facts:
        server: api-ins-1
      until: api_server_1.server.public_v4 != ""
      retries: 5
      delay: 10
    - set_fact: api_ins_1_ipv4="{{ api_server_1.server.public_v4 }}"
    - name: add the server to our ansible inventory
      add_host: hostname={{ api_ins_1_ipv4 }} groups=web ansible_ssh_user=dhc-user ansible_ssh_private_key_file=testing.pem
    - name: wait for ssh to be available
      wait_for: host={{ api_ins_1_ipv4 }} port=22 state=started

    - name: launch instance #2
      os_server:
        name: api-ins-2
        state: present
        image: Ubuntu-14.04
        flavor_ram: 512
        auto_floating_ip: yes
        key_name: "keyname"
      register: api_server_2
    - name: get facts about the server (including its public v4 IP address)
      os_server_facts:
        server: api-ins-2
      until: api_server_2.server.public_v4 != ""
      retries: 5
      delay: 10
    - set_fact: api_ins_2_ipv4="{{ api_server_2.server.public_v4 }}"
    - name: add the server to our ansible inventory
      add_host: hostname={{ api_ins_2_ipv4 }} groups=web ansible_ssh_user=dhc-user ansible_ssh_private_key_file=testing.pem
    - name: wait for ssh to be available
      wait_for: host={{ api_ins_2_ipv4 }} port=22 state=started

    - name: launch instance - haproxy
      os_server:
        name: api-ins-ha-proxy
        state: present
        image: Ubuntu-14.04
        flavor_ram: 512
        auto_floating_ip: yes
        key_name: "keyname"
      register: api_server_3
    - name: get facts about the server (including its public v4 IP address)
      os_server_facts:
        server: api-ins-3
      until: api_server_3.server.public_v4 != ""
      retries: 5
      delay: 10
    - set_fact: public_v4="{{ api_server_3.server.public_v4 }}"
    - name: add the server to our ansible inventory
      add_host: hostname={{ public_v4 }} groups=loadbalancer ansible_ssh_user=dhc-user ansible_ssh_private_key_file=testing.pem
    - name: wait for ssh to be available
      wait_for: host={{ public_v4 }} port=22 state=started

- hosts: loadbalancer
  sudo: True

  roles:
    - role: info.haproxy
      haproxy_defaults:
        mode: http
        stats:
          enabled: True
          uri: /stats
        timeout:
          - param: 'client'
            value: 5000
          - param: 'connect'
            value: 5000
          - param: 'server'
            value: 5000
      haproxy_frontends:
      - name: 'fe-1'
        ip: '{{ public_ipv4 }}:80'
        maxconn: '1000'
        default_backend: 'be-site'
      haproxy_backends: 
      - name: 'be-site'
        description: 'Backend Servers.'
        servers:
          - name: 'be-1'
            ip: '{{ api_ins_1_ipv4 }}'
            port: 3000
          - name: 'be-2'
            ip: '{{ api_ins_2_ipv4 }}'
            port: 3000

- hosts: web
  sudo: True

  tasks:
    - name: Run Apt-Get
      apt: update_cache=yes
    - name: HTTPS
      apt: name=apt-transport-https state=present
    - name: install common packages
      action: apt pkg={{ item }} state=installed
      with_items:
        - git
        - build-essential
        - curl
    - name: Add Nodejs PPA
      shell: "curl --silent --location https://deb.nodesource.com/setup_5.x | bash -"
    - name: Install Nodejs
      apt: pkg=nodejs
    - name: Update npm
      npm: >
        name=npm
        state=latest
        global=yes
        registry=https://registry.npmjs.org
    - name: Install npm global packages
      npm: >
        name={{item}}
        state=present
        global=yes
        registry=https://registry.npmjs.org
      with_items: 
        - forever
        - gulp
        - gulp-nodemon

    - name: Add Group
      group: name=nodeuser state=present
    - name: Add User
      user: name=nodeuser shell=/bin/bash groups=sudo,nodeuser

    - name: Set up app
      copy: src=./nodeapp/ dest=/home/nodeapp/ owner=nodeuser group=nodeuser mode="u=rw,g=rw,o=r"

    - name: Run Package.json
      become: yes
      become_user: nodeuser
      shell: "cd /home/nodeapp/ && npm install"

    - name: Start Forever
      become: yes
      become_user: nodeuser
      shell: "cd /home/nodeapp/ && forever stopall && forever start app.js"

